buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
	    classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:angular-scaffolding:2.0.0"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.2.10"
    }
}

version "1.1.0"
group "lac"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"
apply plugin:"com.moowork.node"
apply plugin:"org.grails.grails-gsp"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:angular-scaffolding:2.0.0"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.16.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    compile 'org.grails.plugins:gsp:4.0.0'
    console "org.grails:grails-console"
    profile "org.grails.profiles:angular"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-datastore-rest-client"
    testCompile "org.grails:grails-web-testing-support"
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

node {
    version = '10.16.0'
    download = true
    nodeModulesDir = file("src/main/frontend")
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

task npmInstall(overwrite: true, type: NpmTask, dependsOn: 'npmSetup') {
    inputs.file('src/main/frontend/package.json')
    outputs.upToDateWhen { file('node_modules').exists() }
    
    npmCommand = ['install']
}


task buildFrontendDev(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile frontend env: development'
    args = ['run', 'build']
}

task buildFrontend(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'build frontend for production'
    args = ['run', 'build']
}

task buildFrontendWatch(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = 'Builds and watches the frontend side assets for rebuilding'
    args = ['run', 'start']
}

task frontendTest(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'verification'
    description = 'Executes frontend side unit tests'
    args = ['run', 'test']
}

task frontendIntegrationTest(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'verification'
    description = 'Executes frontend side integration tests'
    args = ['run', 'e2e']
}

bootRun.dependsOn(buildFrontendDev)

war.dependsOn(buildFrontend)

test.dependsOn(frontendTest)

// integrationTest.dependsOn(clientIntegrationTest)

clean {
    delete fileTree(dir: "src/main/webapp")
}